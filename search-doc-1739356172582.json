{"searchDocs":[{"title":"Nexus","type":0,"sectionRef":"#","url":"/ModuleForge/api/Nexus","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#types","content":" ","version":null,"tagName":"h2"},{"title":"StartConfig​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#StartConfig","content":"&lt;/&gt; interface StartConfig { ExtensionsToLoad: {ModuleScript }?-- A table of module scripts of extensions that will be registered ProvidersToLoad: {ModuleScript }?-- A table of module scripts of modules that will be registered and PostInitPreStartCallback: (() → Promise)?-- A callback that is called after all modules have been Debug: boolean?-- Whether to log debug information. } and loaded in the order they are provided. loaded in the order they are provided. initialized and before they are started.  ","version":null,"tagName":"h3"},{"title":"Provider​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Provider","content":"&lt;/&gt; interface Provider { Init: (self: Provider) → ()?-- The method that is spawned syncronously when the provider is initialized. Start: (self: Provider) → ()?-- The method that is spawned asyncronously when the provider is started. }   ","version":null,"tagName":"h3"},{"title":"Extension​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Extension","content":"&lt;/&gt; interface Extension { BeforeInit: ( self: Extension, provider: Provider ) → ()?-- The hook that fires before each provider is initialized. BeforeStart: ( self: Extension, provider: Provider ) → ()?-- The hook that fires before each provider is started. } Extensions allow developers to extend the functionality of modules under-the-hood. This is useful for adding additional functionality to modules without modifying the provider itself. Developers can save time writing common boilerplate code by using extensions, however, extensions do add a layer of abstraction. The use of extensions is optional and not required. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#functions","content":" ","version":null,"tagName":"h2"},{"title":"Predicates.MatchesName​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Predicates.MatchesName","content":"&lt;/&gt; Nexus.Predicates.MatchesName( name: string-- The name to match. ) → (moduleScript: ModuleScript ) → boolean Returns a predicate that matches a module script's name.  ","version":null,"tagName":"h3"},{"title":"Predicates.IsService​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Predicates.IsService","content":"&lt;/&gt; Nexus.Predicates.IsService(moduleScript: ModuleScript ) → boolean Returns the matching result of a module script's name ending with &quot;Service&quot;.  ","version":null,"tagName":"h3"},{"title":"Predicates.IsController​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Predicates.IsController","content":"&lt;/&gt; Nexus.Predicates.IsController(moduleScript: ModuleScript ) → boolean Returns the matching result of a module script's name ending with &quot;Controller&quot;.  ","version":null,"tagName":"h3"},{"title":"Predicates.IsProvider​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Predicates.IsProvider","content":"&lt;/&gt; Nexus.Predicates.IsProvider(moduleScript: ModuleScript ) → boolean Returns the matching result of a module script's name ending with &quot;Provider&quot;.  ","version":null,"tagName":"h3"},{"title":"Predicates.IsComponent​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Predicates.IsComponent","content":"&lt;/&gt; Nexus.Predicates.IsComponent(moduleScript: ModuleScript ) → boolean Returns the matching conditions of a module script being a component. This checks if the type is a table, if it has a metatable, and if the __tostring cotains &quot;Component&quot; in the beginning of the string. Compatibility This predicate is only compatible with component libraries that mimic Sleitnick's Component library! If you are using a different component library, that doesn't happen to follow the same structure, you will need to write your own predicate.  ","version":null,"tagName":"h3"},{"title":"GetProvider​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#GetProvider","content":"&lt;/&gt; Nexus.GetProvider(name: string) → Provider Returns a provider by name. Will error if the provider doesn't exist. Safety Providers are only safe to access after Nexus has started! If you try to access a provider before Nexus has started, you could encounter unexpected behavior. local MyProvider = Nexus.GetProvider(&quot;MyModule&quot;) -- Safe ONLY after Nexus has started. MyModule:SomeMethod()   ","version":null,"tagName":"h3"},{"title":"GetNameFromProvider​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#GetNameFromProvider","content":"&lt;/&gt; Nexus.GetNameFromProvider(prov: Provider) → string Returns the name of a provider. local MyProvider = Nexus.GetProvider(&quot;MyModule&quot;) print(Nexus.GetNameFromProvider(MyModule)) -- &quot;MyModule&quot;   ","version":null,"tagName":"h3"},{"title":"RegisterExtensionsIn​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#RegisterExtensionsIn","content":"&lt;/&gt; Nexus.RegisterExtensionsIn( dir: Folder | ModuleScript | {Folder | ModuleScript },-- The directory or directories predicate: (moduleScript: ModuleScript ) → boolean,-- The predicate to filter extensions. deepSearch: boolean?-- Whether to search recursively within module scripts. ) → () Recursively registers extensions in the provided directories. to search for modules. Nexus.RegisterExtensionsIn(ServerScriptService.Extensions, Nexus.Predicates.IsExtension)   ","version":null,"tagName":"h3"},{"title":"RegisterExtension​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#RegisterExtension","content":"&lt;/&gt; Nexus.RegisterExtension(ext: Extension) → Extension Returns the name of an extension. local MyExtension = Nexus.GetExtension(&quot;MyExtension&quot;) print(Nexus.GetNameFromExtension(MyExtension)) -- &quot;MyExtension&quot;   ","version":null,"tagName":"h3"},{"title":"RegisterProvidersIn​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#RegisterProvidersIn","content":"&lt;/&gt; Nexus.RegisterProvidersIn( dir: Folder | ModuleScript | {Folder | ModuleScript },-- The directory or directories predicate: (moduleScript: ModuleScript ) → boolean,-- The predicate to filter modules. deepSearch: boolean?-- Whether to search recursively within module scripts. ) → () Recursively registers modules in the provided directories. to search for modules. Nexus.RegisterProvidersIn(ServerScriptService.Services, Nexus.Predicates.IsService) Nexus.RegisterProvidersIn(ReplicatedStorage.Client.Controllers, Nexus.Predicates.IsController)   ","version":null,"tagName":"h3"},{"title":"RegisterProvider​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#RegisterProvider","content":"&lt;/&gt; Nexus.RegisterProvider(prov: Provider) → () Registers a provider to be loaded by Nexus. This method should be called before Nexus.Start is called.  ","version":null,"tagName":"h3"},{"title":"Start​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#Start","content":"&lt;/&gt; Nexus.Start( config: StartConfig?-- The configuration for starting Nexus. ) → Promise-- A promise that is resolved once Nexus has fully started. Starts Nexus by initializing and starting all registered modules. Call Once Can only be called once. Calling more than once will throw an error. You cannot register modules after Nexus has started. Nexus.ToggleDebug(true) Nexus.Start({ ExtensionsToLoad = { ReplicatedStorage.Shared.Extensions.PlayerLifecycles, }, ProvidersToLoad = { ReplicatedStorage.Shared.Providers.MySharedProvider, ServerScriptService.Server.Providers.MyServerProvider, }, PostInitPreStartCallback = function() print(&quot;All modules have been initialized, about to start them!&quot;) end, Debug = true, -- Same as calling Nexus.ToggleDebug(true) }):andThen(function() print(&quot;Nexus has fully started!&quot;) end):catch(warn)   ","version":null,"tagName":"h3"},{"title":"PromiseOnStarted​","type":1,"pageTitle":"Nexus","url":"/ModuleForge/api/Nexus#PromiseOnStarted","content":"&lt;/&gt; Nexus.PromiseOnStarted() → Promise Returns a promise that is resolved once Nexus has fully started. This is useful for any code that needs to tie into Nexus modules but is not the script that called Start. Nexus.PromiseOnStarted():andThen(function() local MyProvider = Nexus.GetProvider(&quot;MyModule&quot;) MyModule:SomeMethod() end):catch(warn)  ","version":null,"tagName":"h3"}],"options":{"id":"default"}}