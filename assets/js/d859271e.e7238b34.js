"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[982],{1879:e=>{e.exports=JSON.parse('{"functions":[{"name":"ToggleDebug","desc":"Sets debug mode to the given value or flips the current value if no value is provided.","params":[{"name":"value","desc":"","lua_type":"boolean?"}],"returns":[],"function_type":"static","source":{"line":190,"path":"lib/nexus/src/init.luau"}},{"name":"GetModule","desc":"Returns a module by name. Will error if the module doesn\'t exist.\\n\\n:::caution Safety\\nModules are only safe to access after Nexus has started! If you try to access a module before Nexus\\nhas started, you could encounter unexpected behavior.\\n:::\\n\\n```lua\\nlocal MyModule = Nexus.GetModule(\\"MyModule\\")\\n-- Safe ONLY after Nexus has started.\\nMyModule:SomeMethod()\\n```","params":[{"name":"name","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"Module\\n"}],"function_type":"static","source":{"line":208,"path":"lib/nexus/src/init.luau"}},{"name":"GetNameFromModule","desc":"Returns the name of a module.\\n\\n```lua\\nlocal MyModule = Nexus.GetModule(\\"MyModule\\")\\nprint(Nexus.GetNameFromModule(MyModule)) -- \\"MyModule\\"\\n```","params":[{"name":"module","desc":"","lua_type":"Module"}],"returns":[{"desc":"","lua_type":"string\\n"}],"function_type":"static","source":{"line":224,"path":"lib/nexus/src/init.luau"}},{"name":"RegisterModulesIn","desc":"Recursively registers modules in the provided directories.\\n\\nto search for modules.","params":[{"name":"dir","desc":"The directory or directories","lua_type":"Folder | ModuleScript | { Folder | ModuleScript }"},{"name":"predicate","desc":"The predicate to filter modules.","lua_type":"(moduleScript: ModuleScript) -> boolean"},{"name":"depth","desc":"The depth to recursively search for modules. Defaults to math.huge.","lua_type":"number?"}],"returns":[],"function_type":"static","source":{"line":238,"path":"lib/nexus/src/init.luau"}},{"name":"RegisterModule","desc":"Registers a module to be loaded by Nexus. This method should be called before Nexus.Start is called.","params":[{"name":"module","desc":"","lua_type":"Module"}],"returns":[],"function_type":"static","source":{"line":290,"path":"lib/nexus/src/init.luau"}},{"name":"Start","desc":"Starts Nexus by initializing and starting all registered modules.\\n\\n:::caution Call Once\\nCan only be called once. Calling more than once will throw an error.\\nYou cannot register modules after Nexus has started.\\n:::\\n\\n```lua\\nNexus.ToggleDebug(true)\\n\\nNexus.Start({\\n\\tLoadOrder = {\\n\\t\\t\\"MyOtherModule\\",\\n\\t\\t\\"MyModule\\",\\n\\t},\\n\\tPostInitPreStartCallback = function()\\n\\t\\tprint(\\"All modules have been initialized, about to start them!\\")\\n\\tend,\\n\\tDebug = true, -- Same as calling Nexus.ToggleDebug(true)\\n}):andThen(function()\\n\\tprint(\\"Nexus has fully started!\\")\\nend):catch(warn)\\n```","params":[{"name":"config","desc":"The configuration for starting Nexus.","lua_type":"StartConfig?"}],"returns":[{"desc":"A promise that is resolved once Nexus has fully started.","lua_type":"Promise"}],"function_type":"static","source":{"line":365,"path":"lib/nexus/src/init.luau"}},{"name":"PromiseOnStarted","desc":"Returns a promise that is resolved once Nexus has fully started. This is useful for any code that\\nneeds to tie into Nexus modules but is not the script that called `Start`.\\n\\n```lua\\nNexus.PromiseOnStarted():andThen(function()\\n\\tlocal MyModule = Nexus.GetModule(\\"MyModule\\")\\n\\tMyModule:SomeMethod()\\nend):catch(warn)\\n```","params":[],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"static","source":{"line":491,"path":"lib/nexus/src/init.luau"}}],"properties":[],"types":[{"name":"StartConfig","desc":"initialized but before they are started.","fields":[{"name":"LoadOrder","lua_type":"{string}?","desc":"A table of module paths that will be loaded in the order they are provided."},{"name":"PostInitPreStartCallback","lua_type":"(() -> Promise)?","desc":"A callback that is called after all modules have been"},{"name":"Debug","lua_type":"boolean?","desc":"Whether to log debug information."}],"source":{"line":79,"path":"lib/nexus/src/init.luau"}},{"name":"Module","desc":"","fields":[{"name":"Init","lua_type":"(self: Module) -> ()?","desc":"The method that is spawned syncronously when the module is initialized."},{"name":"Start","lua_type":"(self: Module) -> ()?","desc":"The method that is spawned asyncronously when the module is started."}],"source":{"line":91,"path":"lib/nexus/src/init.luau"}}],"name":"Nexus","desc":"Nexus is a module loading provider framework forked from Roam that is inspired by Sleitnick\'s Axis\\nframework: https://github.com/Sleitnick/Axis.) This module loader is very barebones and does not feature\\na built-in networking layer like Knit and doesn\'t utilize Axis\'s extension system.\\n\\nNexus collects load-elligable modules (modules that pass the predicate if one is supplied) and\\ninitializes them \\"syncronously\\" in the order they were collected in - the order is determined\\n\\"randomly\\" or by the table of paths provided by the developer. Once all modules are initialized,\\nNexus then \\"starts\\" the modules \\"asyncronously\\" by spawning the \\"Start\\" method in a new thread.\\n\\n[NOTES]\\n* Nexus does not need to be required in each module.\\n* All modules are guaranteed safe to access in the \\"Start\\" method.\\n* All modules are guaranteed to be initialized before the \\"Start\\" method is\\nspawned.\\n* Modules do not have to have either the \\"Init\\" or \\"Start\\" method.\\n* Modules are guaranteed to be initialized in the order they were defined if a\\ncustom load order is provided, otherwise it is \\"random\\".\\n* The name \\"Module\\" or \\"Controller\\" is not required, you decide what convention\\nto follow when naming your modules.\\n\\n[EXAMPLE USAGE]\\n```lua\\nlocal MyModule = {\\n\\tConfig = {\\n\\t\\tName = \\"MyModule\\", -- Optional, name is auto-generated.\\n\\t\\tDependencies = {\\n\\t\\t\\tMyOtherModule,\\n\\t\\t},\\n\\t},\\n}\\n\\nfunction MyModule:Add(x: number, y: number): number\\n\\treturn x + y\\nend\\n\\nfunction MyModule:Init()\\n\\tprint(\\"MyModule initialized!\\")\\n\\tprint(\\"This is safe to do:\\", MyOtherModule:SomeMethod())\\nend\\n\\nfunction MyModule:Start()\\n\\tprint(\\"MyModule started!\\")\\n\\tprint(MyModule:Add(1, 2))\\nend\\n\\nreturn MyModule\\n```","source":{"line":56,"path":"lib/nexus/src/init.luau"}}')}}]);